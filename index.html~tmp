<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Jogo da Velha vs CPU Imbatível</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', sans-serif;
    }

    body {
      height: 100vh;
      background: linear-gradient(135deg, #667eea, #764ba2);
      display: flex;
      justify-content: center;
      align-items: center;
      color: #fff;
    }

    .game-container {
      text-align: center;
    }

    h1 {
      margin-bottom: 10px;
      font-size: 2rem;
    }

    .scoreboard {
      margin-bottom: 15px;
      font-size: 1.2rem;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 10px;
      justify-content: center;
    }

    .cell {
      width: 100px;
      height: 100px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 10px;
      font-size: 2.5rem;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      transition: 0.3s;
      user-select: none;
      animation: fadeIn 0.4s ease;
    }

    .cell:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    .cell.winner {
      background: #00ffcc55;
      animation: pulse 1s infinite;
    }

    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    .status {
      margin: 20px 0;
      font-size: 1.2rem;
    }

    .buttons {
      display: flex;
      justify-content: center;
      gap: 10px;
      flex-wrap: wrap;
    }

    .btn {
      padding: 10px 20px;
      background: #fff;
      color: #333;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      transition: 0.3s;
    }

    .btn:hover {
      background: #f1f1f1;
    }

    .mode {
      margin-top: 10px;
      font-size: 0.95rem;
      opacity: 0.9;
    }
  </style>
</head>
<body>
  <div class="game-container">
    <h1>Jogo da Velha</h1>
    <div class="scoreboard">
      Placar — X: <span id="scoreX">0</span> | O: <span id="scoreO">0</span>
    </div>
    <div class="board" id="board"></div>
    <div class="status" id="status">Vez de: X</div>
    <div class="buttons">
      <button class="btn" onclick="resetGame()">Reiniciar Jogo</button>
      <button class="btn" onclick="resetScores()">Resetar Placar</button>
      <button class="btn" onclick="toggleMode(event)">Modo: 2 Jogadores</button>
    </div>
    <div class="mode" id="modeInfo">Modo atual: 2 jogadores</div>
  </div>

  <script>
    const board = document.getElementById('board');
    const statusText = document.getElementById('status');
    const scoreXDisplay = document.getElementById('scoreX');
    const scoreODisplay = document.getElementById('scoreO');
    const modeInfo = document.getElementById('modeInfo');
    let currentPlayer = 'X';
    let gameOver = false;
    let cells = [];
    let score = { X: 0, O: 0 };
    let vsCPU = false;

    function createBoard() {
      board.innerHTML = '';
      cells = [];
      for (let i = 0; i < 9; i++) {
        const cell = document.createElement('div');
        cell.classList.add('cell');
        cell.dataset.index = i;
        cell.addEventListener('click', handleClick);
        board.appendChild(cell);
        cells.push(cell);
      }
      statusText.textContent = `Vez de: ${currentPlayer}`;
      gameOver = false;
    }

    function handleClick(e) {
      const cell = e.target;
      if (cell.textContent || gameOver) return;

      cell.textContent = currentPlayer;

      if (checkWinner()) {
        statusText.textContent = `Vitória de: ${currentPlayer}!`;
        score[currentPlayer]++;
        updateScore();
        gameOver = true;
        return;
      }

      if (cells.every(c => c.textContent)) {
        statusText.textContent = 'Empate!';
        gameOver = true;
        return;
      }

      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      statusText.textContent = `Vez de: ${currentPlayer}`;

      if (vsCPU && currentPlayer === 'O' && !gameOver) {
        setTimeout(cpuMove, 300);
      }
    }

    function cpuMove() {
      const boardState = cells.map(cell => cell.textContent || '');
      const bestMove = getBestMove(boardState, 'O');
      if (bestMove !== null) cells[bestMove].click();
    }

    function getBestMove(board, player) {
      const opponent = player === 'X' ? 'O' : 'X';

      const scores = {
        X: -10,
        O: 10,
        draw: 0
      };

      function minimax(newBoard, isMaximizing) {
        const result = checkWinnerArray(newBoard);
        if (result) return scores[result];

        if (newBoard.every(cell => cell !== '')) return scores['draw'];

        let bestScore = isMaximizing ? -Infinity : Infinity;

        for (let i = 0; i < newBoard.length; i++) {
          if (newBoard[i] === '') {
            newBoard[i] = isMaximizing ? player : opponent;
            let score = minimax(newBoard, !isMaximizing);
            newBoard[i] = '';
            bestScore = isMaximizing ? Math.max(score, bestScore) : Math.min(score, bestScore);
          }
        }

        return bestScore;
      }

      let bestMove = null;
      let bestScore = -Infinity;

      for (let i = 0; i < board.length; i++) {
        if (board[i] === '') {
          board[i] = player;
          let score = minimax(board, false);
          board[i] = '';
          if (score > bestScore) {
            bestScore = score;
            bestMove = i;
          }
        }
      }

      return bestMove;
    }

    function checkWinnerArray(arr) {
      const wins = [
        [0,1,2],[3,4,5],[6,7,8],
        [0,3,6],[1,4,7],[2,5,8],
        [0,4,8],[2,4,6]
      ];
      for (const [a,b,c] of wins) {
        if (arr[a] && arr[a] === arr[b] && arr[b] === arr[c]) {
          return arr[a];
        }
      }
      return null;
    }

    function checkWinner() {
      const wins = [
        [0,1,2],[3,4,5],[6,7,8],
        [0,3,6],[1,4,7],[2,5,8],
        [0,4,8],[2,4,6]
      ];

      for (const combo of wins) {
        const [a, b, c] = combo;
        if (
          cells[a].textContent &&
          cells[a].textContent === cells[b].textContent &&
          cells[b].textContent === cells[c].textContent
        ) {
          [cells[a], cells[b], cells[c]].forEach(cell => cell.classList.add('winner'));
          return cells[a].textContent;
        }
      }
      return null;
    }

    function updateScore() {
      scoreXDisplay.textContent = score.X;
      scoreODisplay.textContent = score.O;
    }

    function resetGame() {
      currentPlayer = 'X';
      createBoard();
    }

    function resetScores() {
      score = { X: 0, O: 0 };
      updateScore();
      resetGame();
    }

    function toggleMode(e) {
      vsCPU = !vsCPU;
      resetGame();
      const modeText = vsCPU ? "Jogador vs CPU" : "2 jogadores";
      modeInfo.textContent = `Modo atual: ${modeText}`;
      e.target.textContent = `Modo: ${modeText}`;
    }

    createBoard();
  </script>
</body>
</html>
